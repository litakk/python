# УРОК - 1

# БАЗА ДАННЫХ -  ЕСТЬ 2 ТИПА БАЗЫ ДАННЫХ
# JSON - КЛЮЧ И ЗНАЧЕНИЕ
# RELATIONAL DB
# МОЖЕТ СОЕДИНЯТЬСЯ С ДРУГОЙ СТРАНИЦЕЙ - ИМЕТЬ ВЗАИМОСВЯЗЬ
# НЕНУЖНЫЕ БАЗЫ ДАННЫХ - JSON.DB AND MANGO.DB

# RELATIONAL DB - ПОЛЬЗУЕМСЯ ЧЕРЕЗ ID. EXAMPLE: ДЛЯ ТОГО ЧТО БЫ СОВМЕЩАТЬ 2 ТАБЛИЦЫ
# PSQL - POST - ДЕРЖИТ RELATIONAL DB/

# ЛЮБАЯ БАЗА ДАННЫХ ДОЛЖНА НАХОДИТЬСЯ НА СЕРВЕРЕ - СЕРВЕР МОЖЕТ БЫТЬ НА КОМПЬЮТЕРЕ ИЛИ НА АМАЗОНЕ

# ПОСЛЕ СКАЧИВАНИЯ МЫ ВКЛЮЧАЕМ ФУНКЦИЮ POSTGRES  
# https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
# ДАЛЕЕ В ПОИСКЕ РАСШИРЕНИЙ НА VS ПИШЕМ PostgreSQL

# ====================================

# SYNTAX - пишем только большими буквами а содержимое маленькими
# SYNTAX - под  каждым кодом пишем в конце  ; 
# ПОТОМ СОЗДАЕМ СЕРВЕР 127.0.0.1 И В НЕМ СОЗДАЕМ ТАБЛИЦУ А ЗАТЕМ КОНТРОЛИРУЕМ

#  СОЗДАТЬ ТАБЛИЦУ

#  CREATE TABLE persons (
    #  id SERIAL PRIMARY KEY,
    #  name VARCHAR(255),
    #  email VARCHAR(255),
    #  password VARCHAR(255) NOT NULL UNIQUE DEFAULT '12345' 
#  );

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

#  ДОБАВИТЬ ОДНУ СТРОКУ ИНФОРМАЦИИ 

#  INSERT INTO persons (name, email, password) 
#  VALUES ('John Doe', 'test@gmail.com', '12345');

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

#  ДОБАВИТЬ СРАЗУ НЕСКОЛЬКО СТРОК ИНФОРМАЦИИ

#  INSERT INTO persons (name, email, password)
#  VALUES 
    #  ('John Doe', 'test2@gmail.com', '12'),
    #  ('Jane Doe 2', 'test3@gmail.com', '123'),
    #  ('Jack Doe 3', 'test4@gmail.com', '1234');

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

#  ПОСМОТРЕТЬ РЕЗУЛЬТАТ
#  SELECT * FROM users;

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# ОБНОВИТЬ ДАННЫЕ
# UPDATE users SET name = 'Jane Doe' WHERE id = 1

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# ИЗМЕНИТЬ ТАБЛИЦУ
# ALTER TABLE users ADD COLUMN age INT

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# УДАЛИТЬ ДАННЫЕ
# DELETE FROM users WHERE id = 1

#  - - - - - - - - - - - - - - - - - - - - - - - - - 


# ADD - Добавить в таблицу новую запись
# =================================================================================
# UPDATE - Обновить запись в таблице
# обновить цену автомобиля с id 3 на 12345
# =================================================================================
# ALTER - Изменить структуру таблицы
# добавить в таблицу колонку 'sold' (продано) *BOOLEAN* тип данных - boolean (логический тип данных)
# =================================================================================
# UPDATE - Обновить запись в таблице
# RU: обновить статус продажи автомобиля с id 4 на True
# =================================================================================
# DELETE - Удалить запись из таблицы
# RU: удалить автомобиль с id 5 из таблицы

# =================================================================================

# VARCHAR => используется для хранения строк и текста.
#     INT => используется для хранения целых чисел.
#     SERIAL => используется для автоматического увеличения значения.
#     PRIMARY KEY => используется для установки первичного ключа (он идентичен обычному идентификатору)
#     NULL => используется для установки поля как пустого.
#     NOT NULL => используется для установки поля по мере необходимости
#     UNIQUE => используется для установки поля как уникального.
#     DEFAULT => используется для установки значения по умолчанию (например: DEFAULT '...')

# =================================================================================

# УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2
# УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2
# УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2 УРОК 2

# Data types
# Boolean (TRUE/FALSE) например: CREATE TABLE customers (name TEXT, is_active BOOLEAN)
# Типы символов (CHAR, VARCHAR, TEXT) Основное различие между CHAR и VARCHAR заключается в том,
# что CHAR имеет фиксированную длину, а VARCHAR — переменную. Тип TEXT используется для хранения более длинных строк.

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# ПОДТЕКСТ -
# Он не имеет фиксированной длины.
# Разница между фиксированной и переменной длиной заключается в том, что фиксированная длина обрабатывается быстрее,
# чем переменная. И места занимает меньше.
# Сходство фиксированной и переменной длины заключается в том, что они оба хранят строки любой длины.

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# CHAR - САМАЯ БЫСТРАЯ - И места занимает меньше - CHAR 
#   CHAR (фиксированная длина)          максимум символов 255
#       пример: CHAR(10) 'Hello'
#           CREATE TABLE customers (name CHAR(10), address CHAR(10))
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
#   VARCHAR (переменная длина)    максимум символов 65535
#       пример: VARCHAR(10) 'Hello'
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
#   TEXT (переменная не ограничена)    максимум символов 65535
#       пример: TEXT 'Hello'
#           CREATE TABLE customers (name TEXT, address TEXT)
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# Числовые типы (INTEGER, BIGINT, DECIMAL, NUMERIC) INTEGER (целые числа) 
# максимальное количество символов 10 например: INTEGER 2147483647    
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
# BIGINT (большие целые числа) 
# максимальное количество символов 19 например: BIGINT 9223372036854775807
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
# DECIMAL (фиксированная точность)
# максимальное количество символов 131072 например:
# DECIMAL(3, 2) 999,99 
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
# NUMERIC (переменная точность), максимальное количество символов 131072,
# например: NUMERIC(5,2) 999,99.
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# Типы даты/времени (DATE, TIME, TIMESTAMP)
# DATE (сохраняет только дату) максимум символов 10 например: DATE '2018-01-01' 
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
# TIME (сохраняет только время) максимум 8 символов например: TIME '12:00:00'
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
# TIMESTAMP (Сохраняет дату и время) максимум символов 26, например: TIMESTAMP '2018-01-01 12:00:00'

#  - - - - - - - - - - - - - - - - - - - - - - - - - 
#  - - - - - - - - - - - - - - - - - - - - - - - - - 
# CREATE TABLE users (last_login TIMESTAMP)
# INSERT INTO ... (last_login) 
# VALUES ('2018-01-01 12:00:00') || (NOW())

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# ИНТЕРВАЛ (хранит периоды времени) 
# СИНТАКСИС: ИНТЕРВАЛ 'значение' ЕДИНИЦЫ: год, месяц, день, час, минута, секунда, неделя  
# например: '1 год 2 месяца 2 дня ...'

#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# SELECT * FROM orders WHERE order_date > NOW() - INTERVAL '30 days';
# Заказы, сделанные за последние 30 дней

# ex 2:
# CREATE TABLE events (
#    id SERIAL PRIMARY KEY,
#    event_name VARCHAR(255) NOT NULL,
#    start_time TIMESTAMP NOT NULL,
#    duration INTERVAL NOT NULL
# );
# INSERT INTO events (event_name, start_time, duration)
# VALUES (
#          'Birthday Party', 
#          TIMESTAMP '2024-01-01 12:00:00', 
#          INTERVAL '2 hours'
#       );

#  - - - - - - - - - - - - - - - - - - - - - - - - - 
#  - - - - - - - - - - - - - - - - - - - - - - - - - 

# NOT NULL => CREATE TABLE customers (name TEXT NOT NULL)
# UNIQUE => CREATE TABLE customers (name TEXT UNIQUE)
# PRIMARY KEY => CREATE TABLE customers (id SERIAL PRIMARY KEY, name TEXT)
# FOREIGN KEY => CREATE TABLE customers (id SERIAL PRIMARY KEY, name TEXT) 
# Разница между ПЕРВИЧНЫМ КЛЮЧОМ и ВНЕШНИМ КЛЮЧОМ заключается в том, что
# ПЕРВИЧНЫЙ КЛЮЧ используется для уникальной идентификации строки в таблице.
# FOREIGN KEY используется для ссылки на столбец в ДРУГОЙ ТАБЛИЦЕ.
# CHECK => CREATE TABLE customers (name TEXT, age INTEGER CHECK (age >= 18))
# EXCLUDE => SELECT * FROM users EXCLUDE age = 18; => 
# Это ограничение используется для исключения данных из таблицы.
# Например, если у нас есть таблица клиентов, и мы хотим исключить клиентов с тем же именем и возрастом.

