# БАЗА ДАННЫХ -  ЕСТЬ 2 ТИПА БАЗЫ ДАННЫХ
# JSON - КЛЮЧ И ЗНАЧЕНИЕ
# RELATIONAL DB
# МОЖЕТ СОЕДИНЯТЬСЯ С ДРУГОЙ СТРАНИЦЕЙ - ИМЕТЬ ВЗАИМОСВЯЗЬ
# НЕНУЖНЫЕ БАЗЫ ДАННЫХ - JSON.DB AND MANGO.DB

# RELATIONAL DB - ПОЛЬЗУЕМСЯ ЧЕРЕЗ ID. EXAMPLE: ДЛЯ ТОГО ЧТО БЫ СОВМЕЩАТЬ 2 ТАБЛИЦЫ
# PSQL - POST - ДЕРЖИТ RELATIONAL DB/

# ЛЮБАЯ БАЗА ДАННЫХ ДОЛЖНА НАХОДИТЬСЯ НА СЕРВЕРЕ - СЕРВЕР МОЖЕТ БЫТЬ НА КОМПЬЮТЕРЕ ИЛИ НА АМАЗОНЕ

# ПОСЛЕ СКАЧИВАНИЯ МЫ ВКЛЮЧАЕМ ФУНКЦИЮ POSTGRES  
# https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
# ДАЛЕЕ В ПОИСКЕ РАСШИРЕНИЙ НА VS ПИШЕМ PostgreSQL

# ====================================

# SYNTAX - пишем только большими буквами а содержимое маленькими
# SYNTAX - под  каждым кодом пишем в конце  ; 
# ПОТОМ СОЗДАЕМ СЕРВЕР 127.0.0.1 И В НЕМ СОЗДАЕМ ТАБЛИЦУ А ЗАТЕМ КОНТРОЛИРУЕМ


# CREATE TABLE users (
#     id SERIAL PRIMARY KEY,
#     name VARCHAR(255), # - используется для хранения строк и текста. 
#     email VARCHAR(255), # - используется для хранения строк и текста. 
#     password VARCHAR(255) NOT NULL UNIQUE DEFAULT '12345' 
# );

# ====================================

# ДЛЯ СОЗДАНИЯ ОДНОЙ ТАБЛИЦЫ :
# INSERT INTO users (name, email, password) 
# VALUES ('John Doe', 'test@gmail.com', '12345');

# ДЛЯ СОЗДАНИЯ НЕСКОЛЬКИХ СРАЗУ 
# INSERT INTO users (name, email, password)
# VALUES ,
#     ('John Doe', 'test2@gmail.com', '12'),
#     ('Jane Doe 2', 'test3@gmail.com', '123');

# ====================================

# SELECT * FROM users; - для просмотра результата


# =================================================================================

# ADD - Добавить в таблицу новую запись
# =================================================================================
# UPDATE - Обновить запись в таблице
# обновить цену автомобиля с id 3 на 12345
# =================================================================================
# ALTER - Изменить структуру таблицы
# добавить в таблицу колонку 'sold' (продано) *BOOLEAN* тип данных - boolean (логический тип данных)
# =================================================================================
# UPDATE - Обновить запись в таблице
# RU: обновить статус продажи автомобиля с id 4 на True
# =================================================================================
# DELETE - Удалить запись из таблицы
# RU: удалить автомобиль с id 5 из таблицы

# =================================================================================

# VARCHAR => используется для хранения строк и текста.
#     INT => используется для хранения целых чисел.
#     SERIAL => используется для автоматического увеличения значения.
#     PRIMARY KEY => используется для установки первичного ключа (он идентичен обычному идентификатору)
#     NULL => используется для установки поля как пустого.
#     NOT NULL => используется для установки поля по мере необходимости
#     UNIQUE => используется для установки поля как уникального.
#     DEFAULT => используется для установки значения по умолчанию (например: DEFAULT '...')

# =================================================================================