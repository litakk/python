# pow(): Функция pow(x, y) возведения числа x в степень y.

# Пример: 
# print(pow(2, 4)) # Выводит 16

# print(): Функция print() используется для вывода содержимого на экран.

# Пример:
# print("Hello, World!") # Выводит "Hello, World!"

# range(): Функция range() создает последовательность чисел в заданном диапазоне.

# Пример:
# for i in range(1, 5):
#     print(i) # Выводит числа от 1 до 4

# repr(): Функция repr() возвращает строковое представление объекта.

# Пример:
# x = 10
# print(repr(x)) # Выводит "10"

# reversed(): Функция reversed() возвращает обратный итератор для переданной последовательности.

# Пример:
# my_list = [1, 2, 3, 4]
# for i in reversed(my_list):
#     print(i) # Выводит числа от 4 до 1

# round(): Функция round() округляет число до заданного количества знаков после запятой.

# Пример:
# print(round(3.14159, 2)) # Выводит 3.14

# set(): Функция set() создает множество, то есть уникальный список элементов.

# Пример:
# my_set = set([1, 2, 2, 3, 4, 4])
# print(my_set) # Выводит {1, 2, 3, 4}

# setattr(): Функция setattr() устанавливает значение атрибута объекта.

# Пример:
# class Person:
#     pass

# p = Person()
# setattr(p, 'name', 'Alice')
# print(p.name) # Выводит "Alice"

# slice(): Функция slice() создает объект среза, который можно использовать для получения подстроки или подмножества элементов списка.

# Пример:
# my_list = [1, 2, 3, 4, 5]
# s = slice(1, 4)
# print(my_list[s]) # Выводит [2, 3, 4]

# sorted(): Функция sorted() сортирует список или другую итерируемую последовательность.

# Пример:
# my_list = [3, 1, 4, 2]
# print(sorted(my_list)) # Выводит [1, 2, 3, 4]

# staticmethod(): Функция staticmethod() превращает метод класса в статический метод, который может быть вызван без создания экземпляра класса.

# Пример:
# class MathUtils:
#     @staticmethod
#     def add(x, y):
#         return x + y

# print(MathUtils.add(2, 3)) # Выводит 5

# str(): Функция str() преобразует объект в строковое представление.

# Пример:
# my_number = 10
# print(str(my_number)) # Выводит "10"

# sum(): Функция sum() возвращает сумму элементов списка или другой итерируемой последовательности.

# Пример:
# my_list = [1, 2, 3, 4, 5]
# print(sum(my_list)) # Выводит 15

# super(): Функция super() используется для доступа к родительским методам в классах.

# Пример:
# class Person:
#     def say_hello(self):
#         print("Hello")

# class Student(Person):
#     def say_hello(self):
#         super().say_hello()
#         print("World")

# s = Student()
# s.say_hello() # Выводит "Hello" и "World"

# tuple(): Функция tuple() создает неизменяемый кортеж (упорядоченную последовательность элементов).

# Пример:
# my_list = [1, 2, 3, 4, 5]
# my_tuple = tuple(my_list)
# print(my_tuple) # Выводит (1, 2, 3, 4, 5)

# vars(): Функция vars() возвращает словарь с атрибутами объекта.

# Пример:
# class Person:
#     def __init__(self, name):
#         self.name = name

# p = Person("Alice")
# print(vars(p)) # Выводит {'name': 'Alice'}

# zip(): Функция zip() объединяет элементы нескольких списков в кортежи.

# Пример:
# my_list1 = [1, 2, 3]
# my_list2 = ['a', 'b', 'c']
# for x, y in zip(my_list1, my_list2):
#     print(x, y) # Выводит 1 a, 2 b, 3 c